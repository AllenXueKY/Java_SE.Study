package com.AllenXue.JavaBase.Homeork3;

import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Person {
	private String ID;      //身份证号
	private String Name;  //姓名
	private String Sex;	  //性别
	private double Stature;  //身高
	private double Weight;   //体重
	
	/**
	 * 判断身份证号
	 * @param person
	 * @return
	 */
	public boolean isID(Person person) {
		int count = person.ID.length();
		if (count > 18 ) {
			PrintInformations("身份证号");
			return false;
		}
		for (int i = 0; i < count - 1; i++) {
			if(!(person.ID.charAt(i) > '0' && person.ID.charAt(i) < '9')){
				PrintInformations("身份证号");
				return false;
			}	
		}

		if (!(person.ID.charAt(count) > '0' && person.ID.charAt(count) < '9' && person.ID.charAt(count) == 'X' || person.ID.charAt(count) == 'X')){
			PrintInformations("身份证号");
			return false;
		}
		String yyyymmdd = null;
		for (int i = 6; i < count - 3; i++) {
			yyyymmdd = yyyymmdd + person.ID.charAt(i);
		}
		if (!isValidDate(yyyymmdd)) {
			PrintInformations("身份证号");
			return false; 
		}
		return true;
	}
	
	/**
	 * 身份证的出生日期段判断
	 * @param str
	 * @return
	 */
	public static boolean isValidDate(String str){
	      boolean convertSuccess=true;
	       SimpleDateFormat format = new SimpleDateFormat("yyyymmdd");// 指定日期格式为四位年两位月份两位日期；
	       try {
	    	   // 设置lenient为false. 否则SimpleDateFormat会比较宽松地验证日期，比如2007/02/29会被接受，并转换成2007/03/01
	          format.setLenient(false);
	          format.parse(str);
	       } catch (ParseException e) {
	          // e.printStackTrace();
	    	   // 如果throw java.text.ParseException或者NullPointerException，就说明格式不对
	           convertSuccess=false;
	       } 
	       return convertSuccess;
	}
	
	/**
	 * 校验姓名
	 */
	public boolean isName(Person person){
		if (person.Name.length() < 2 ) {
			PrintInformations("姓名");
			return false;
		}
		//判断是否有符号
		char[] unValidChar = {' ', '\'', '"', '?', '<', '>', ','};
		for(char ch : unValidChar){
			if(person.Name.contains(Character.toString(ch))){
				PrintInformations("姓名");
				return false;
			}
		}
		//判断是否有数字
		for (int j = 0; j < person.Name.length(); j++) {
			if(person.Name.charAt(j) > '0' && person.Name.charAt(j) < '9') {
				PrintInformations("姓名");
				return false;
			}
		}
		return true;
	}
	/**
	 * 打印函数
	 */
	public  void PrintInformations(String Type){
		System.out.println("对不起，您输入的" + Type + "有误，请验证后重新输入！！！");
	}	
	public String getID() {
		return ID;
	}

	public void setID(String iD) {
		ID = iD;
	}

	public String getName() {
		return Name;
	}

	public void setName(String name) {
		this.Name = name;
	}

	public String getSex() {
		return Sex;
	}

	public void setSex(String sex) {
		this.Sex = sex;
	}

	public double getStature() {
		return Stature;
	}

	public void setStature(double stature) {
		this.Stature = stature;
	}

	public double getWeight() {
		return Weight;
	}

	public void setWeight(double weight) {
		this.Weight = weight;
	}


		
		
	
}
